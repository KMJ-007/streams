{"images/headless-commerce":{"title":"headless commerce","links":[],"tags":["seed"],"content":"headless commerce basically gives you freedom to keep frontend(storefront) and backend(business logic)of e commerce platform differently, so they can be customised with more greater developer experience, it has some pros and cons.\npros:\n\nFlexibility and familiarity for frontend developers.\nyou have control in your hands to do whatever you want to do\n\ncons:\n\nIntegration effort and dependency on third-party services.\n"},"index":{"title":"Home","links":["thoughts","tags/seed","tags/sapling","tags/evergreen"],"tags":[],"content":"\n    \n\nI’m Karan, i found myself thinking about different things. from computers, history, philosophy, art, to music, but i don’t write or nurture them, this is my place to grow those randoms thoughts and ideas, from reflections to observation to resources to everything, it’s like my capturing stream of thoughts.\nThoughts can follow in following buckets:\n\nSeed: brief thought\nSapling: fully formed thought\nEvergreen: Growing thought\n"},"tags/evergreen":{"title":"Evergreen","links":[],"tags":[],"content":""},"tags/sapling":{"title":"Sapling","links":[],"tags":[],"content":""},"tags/seed":{"title":"Seed","links":[],"tags":[],"content":""},"thoughts/Advanced-Deepweb-crawler":{"title":"Advanced Deepweb crawler","links":[],"tags":["seed","project"],"content":"i think building a deepweb crawler is going to be great project, and i found this research paper interesting, and thinking of implementing this in rust\nlink to the paper: https://www.eurchembull.com/uploads/paper/985c7c89d52228caa8e40398c1a31c5c.pdf\nplz write a blog if you end up doing this, will be helpful to the other people\nalso real time wasm demo will be cool, vector db and visualization with playable graphs"},"thoughts/Anti-Signals":{"title":"Anti Signals","links":[],"tags":["seed"],"content":"When we see people doing something and it start working for them on internet/irl, we try to imitate them or one can say try to catch the signals, but there is high chance that one will fail, because rather than catching signals we catch the anti signals, because they are the easiest one to fall for, it’s like when signal is propagated to many times over the network, it looses it’s value and it becomes anti signal, it’s anti signal in disguise of signal."},"thoughts/Automating-Call-Center":{"title":"Automating Call Center","links":[],"tags":["seed","idea"],"content":"i know few friends who do job at call center, at late night, many of them just sell insurance and other things in countries like uk and usa, despite lack of communication skill they are able to, i think using AI we can automate this whole process with more accuracy and higher chances of accuracy, but don’t want to exploit this, just want to do for fun, just need to give calling ability, text to speech, feeding back what the response was in to the model, and giving response back!\ncalling friend and making prank in local language would be fun idea"},"thoughts/Database-schema-and-architecture-mistakes-and-learnings":{"title":"Database schema and architecture mistakes and learnings","links":[],"tags":["seed"],"content":""},"thoughts/English-speaking-coach":{"title":"English speaking coach","links":[],"tags":["seed","project"],"content":"great demo from retaill ai chatbots calling, and demo sounds real, making an english speaking coach who can teach you english via call, is a great idea, because talking with someone in english is great way to improve your english\nhttps://www.retellai.com/"},"thoughts/Minecraft-redstone-llm-budy":{"title":"Minecraft redstone llm budy","links":[],"tags":["seed","project"],"content":"\nI need to make this, may be for clg project submission, anyway i want to learn and get into the world of java"},"thoughts/Nodejs-observability":{"title":"Nodejs observability","links":[],"tags":["seed"],"content":"need to setup a good observability and error tracking for nodejs and lot of people really struggle with this, so need to write a blog about this also"},"thoughts/Promises-in-js":{"title":"Promises in js","links":[],"tags":["seed"],"content":"what are Promise in Javascript ?\nThey are similar to real life promise, how we make promise to someone that i am making promise that i will come meet you, same way we are just telling that, this piece code will get executed in future.\nlet promise = new Promise (function(resolve, reject) { \n// executor (the producing code, &quot;singer&quot;) \n});\nPromise object in javascript have two main part, “producing code” and “consuming code”,  producing code’s job is to produce the code, and consuming code’s job is tot consume the results from the produced code.\nlet myPromise = new Promise(function(myResolve, myReject) {  \n// &quot;Producing Code&quot; (May take some time)  \n  \n  myResolve(); // when successful  \n  myReject();  // when error  \n});  \n  \n// &quot;Consuming Code&quot; (Must wait for a fulfilled Promise)  \nmyPromise.then(  \n  function(value) { /* code if successful */ },  \n  function(error) { /* code if some error */ }  \n);\nfunction passed to new Promise is called executor, which will execute them and then will make results for consuming code to consume the result.\nso in short, executor runs automatically and attempts to do the job, when it finished with the task, it calls resolve if it was successful or reject if there was an error.\nPromise Object have this these two internal properties:\n\nresolve example:\nlet promise = new Promise(function(resolve, reject) {\n// the function is executed automatically when the promise is constructed\n \n// after 1 second signal that the job is done with the result &quot;done&quot;\nsetTimeout(() =&gt; resolve(&quot;done&quot;), 1000);\n});\nstate: “fulfilled”,\nresult: “done”\nreject example:\nlet promise = new Promise(function(resolve, reject) { \n// after 1 second signal that the job is finished with an error \nsetTimeout(() =&gt;  reject(new Error(&quot;Whoops!&quot;``)``), 1000); \n});\nstate: “rejected”,\nresult: “error”\nthere can be only single result or an error\nlet promise = new Promise(function(resolve, reject) {\n  resolve(&quot;done&quot;);\n  reject(new Error(&quot;...&quot;)); // ignored\n  setTimeout(() =&gt; resolve(&quot;...&quot;)); // ignored\n});\nConsumer code:\n.then part, when promises is either resolved or rejected, to get both values we use .then method on the promise object to get our result or error\nlet promise = new Promise(function(resolve, reject) {\n \nsetTimeout(() =&gt; resolve(&quot;done!&quot;), 1000);\n \n});\n \n// resolve runs the first function in .then\npromise.then(\n \nresult =&gt; alert(result), // shows &quot;done!&quot; after 1 second\n \nerror =&gt; alert(error) // doesn&#039;t run\n \n);\nerror example:\nlet promise = new Promise(function(resolve, reject) {\n \nsetTimeout(() =&gt; reject(new Error(&quot;Whoops!&quot;)), 1000);\n \n});\n \n// reject runs the second function in .then\npromise.then(\n \nresult =&gt; alert(result), // doesn&#039;t run\n \nerror =&gt; alert(error) // shows &quot;Error: Whoops!&quot; after 1 second\n \n);\njust like normal try catch block, we have same with promises also we have try to get desired result, catch to catch the error, and finally block to execute final code when every thing is done!\ncatch:\nlet promise = new Promise((resolve, reject) =&gt; {\nsetTimeout(() =&gt; reject(new Error(&quot;Whoops!&quot;)), 1000);\n});\n \n// .catch(f) is the same as promise.then(null, f)\npromise.catch(alert); // shows &quot;Error: Whoops!&quot; after 1 second\nfinally block don’t care about the result of promise, whether it was fulfilled or un fulfilled, it only knows to execute the code it is provided, and order matters in finally, if we write finally before the catch or then, it will run first,\nnew Promise((resolve, reject) =&gt; {\nthrow new Error(&quot;error&quot;);\n})\n.finally(() =&gt; alert(&quot;Promise ready&quot;)) // triggers first\n.catch(err =&gt; alert(err)); // &lt;-- .catch shows the error\nwhat will be result ?\nlet promise = new Promise(function(resolve, reject) {\n\tresolve(&quot;Good Morning!&quot;);\n\tsetTimeout(() =&gt; resolve(&quot;Good Night!&quot;), 1000);\n});\n \npromise.then(alert);\ndifference between callback and promise ?\ncallback can be only called once, there is result or some kind of trigger, promises can be called as many times you want even after promise is fulfilled to access the result as many times you want\nchaining in promises:\nwe can chain promises, example:\nnew Promise(function(resolve, reject) {\n \nsetTimeout(() =&gt; resolve(1), 1000); // (*)\n \n}).then(function(result) { // (**)\n \nalert(result); // 1\n \nreturn result * 2;\n \n}).then(function(result) { // (***)  \n \nalert(result); // 2\n \nreturn result * 2;\n \n}).then(function(result) {\n \nalert(result); // 4\n \nreturn result * 2;\n  \n});\n\nadding many then don’t means chaining, they don’t forward the result to the next thing, they act as independent promise\nlet promise = new Promise(function(resolve, reject) {\n \nsetTimeout(() =&gt; resolve(1), 1000);\n \n});\n \npromise.then(function(result) {\n \nalert(result); // 1\n \nreturn result * 2;\n \n});\n \npromise.then(function(result) {\n \nalert(result); // 1\n \nreturn result * 2;\n \n});\n \npromise.then(function(result) {\n \nalert(result); // 1\n \nreturn result * 2;\n \n});\nPromise Apis:\nThere are 6 static methods of Promise class:\nPromise.all:\nwe want to execute many promise in parallel and want to wait until all of them are resolved\nPromise.all([\n \nnew Promise(resolve =&gt; setTimeout(() =&gt; resolve(1), 3000)), // 1\n \nnew Promise(resolve =&gt; setTimeout(() =&gt; resolve(2), 2000)), // 2\n \nnew Promise(resolve =&gt; setTimeout(() =&gt; resolve(3), 1000)) // 3\n \n]).then(alert);\nthe order of results will be same as the order of promise, even if the promise got rejected\nA popular trick is to map the array of job and pass them into promise all\nlet urls = [\n \n&#039;https://api.github.com/users/kmj-007&#039;,\n \n&#039;https://api.github.com/users/remy&#039;,\n \n&#039;https://api.github.com/users/jeresig&#039;\n \n];\n \n// map every url to the promise of the fetch\n \nlet requests = urls.map(url =&gt; fetch(url));\n \n// Promise.all waits until all jobs are resolved\nPromise.all(requests)\n.then(responses =&gt; responses.forEach(\nresponse =&gt; alert(`${response.url}: ${response.status}`)\n));\nimportant thing to keep in mind about promise.all\n\nIf any of the promises is rejected, the promise returned by Promise.all immediately rejects with that error.\n\nexample of error:\nPromise.all([\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(1), 1000)),\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject(new Error(&quot;Whoops!&quot;)), 2000)),\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(3), 3000))\n \n]).catch(alert); // Error: Whoops!\nalso promise.all not cancel and does nothing about existing ongoing request, even if promise already got rejected, it will simply no longer watch them or care them, promise got rejected then it’s over, promise.all no longer cares about any thing.\nin short,\n\nPromise.all = all or nothing\n\nPromise.allSettled:\nthis one is recently added, old browsers don’t support, they need polyfills and transpilors\nPromise.allSettled just waits for all promises to settle, regardless of the result.\n\n{status:&quot;fulfilled&quot;, value:result} for successful responses,\n{status:&quot;rejected&quot;, reason:error} for errors.\n\nlet urls = [\n&#039;https://api.github.com/users/iliakan&#039;,\n&#039;https://api.github.com/users/remy&#039;,\n&#039;https://no-such-url&#039;\n];\n \n  \n \nPromise.allSettled(urls.map(url =&gt; fetch(url)))\n.then(results =&gt; {\n//\n[\n  {\n    status: &#039;fulfilled&#039;,\n    value: /* response data */\n  },\n  {\n    status: &#039;fulfilled&#039;,\n    value: /* response data */\n  },\n  {\n    status: &#039;rejected&#039;,\n    reason: /* error object */\n  }\n]\n//\n}\n});\n});\npolyfill implementation for incompatible browsers:\nif (!Promise.allSettled) {\n  const rejectHandler = reason =&gt; ({ status: &#039;rejected&#039;, reason });\n  const resolveHandler = value =&gt; ({ status: &#039;fulfilled&#039;, value });\n \n  Promise.allSettled = function(promises) {\n    const convertedPromises = promises.map(p =&gt; Promise.resolve(p).then(resolveHandler, rejectHandler));\n    return Promise.all(convertedPromises);\n  };\n}\nPromise.race:\nit’s like fastest finger first, whichever gets resolved first wins\nPromise.race([\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(1), 1000)),\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject(new Error(&quot;Whoops!&quot;)), 2000)),\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(3), 3000))\n \n]).then(alert); // 1\npromise.any:\npromise any just does what it tells, if any of the promise gets fulfilled, then it returns the result, then ignores the others, if all get rejected, then it combines the error(AggregateError) and returns it\nPromise.any([\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject(new Error(&quot;Whoops!&quot;)), 1000)),\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(1), 2000)),\n \nnew Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(3), 3000))\n \n]).then(alert); // 1\nPromise.resolve/reject:\nthey are not used that much, because of async/await\n\nPromise.resolve(value) – makes a resolved promise with the given value.\nPromise.reject(error) – makes a rejected promise with the given error.\n\nPromise handlers .then/.catch/.finally are always asynchronous.\nwhat does that mean:\n  \nlet promise = Promise.resolve(); //even if the promise resolved first or immediately\n \npromise.then(() =&gt; alert(&quot;promise done!&quot;));\n \nalert(&quot;code finished&quot;); // this alert shows first\nput it more simply, when a promise is ready, its .then/catch/finally handlers are put into the queue; they are not executed yet. When the JavaScript engine becomes free from the current code, it takes a task from the queue and executes it.\nThat’s why “code finished” in the example above shows first.\n\ninternal implementation if you are interested of apis of promise:\nPromise.race:\nfunction race(promises) {\n  // Return a new promise\n  return new Promise((resolve, reject) =&gt; {\n    promises.forEach(promise =&gt; {\n      // Wait for any promise to settle (resolve or reject)\n      //adding .then to all the promisese to which we are iterating\n      promise.then(\n      function(result) { resolve(result)},\n      function(error) { reject(error) }\n      );\n    });\n  });\n}\n \nPromise.all:\nfunction all(promises) {\n  return new Promise((resolve, reject) =&gt; {\n    const result = [];\n \n    if (promises.length === 0) {\n      resolve(result);\n      return;\n    }\n \n    let countPending = promises.length;\n \n    promises.forEach((promise, index) =&gt; {\n      Promise.resolve(promise).then((value) =&gt; {\n        result[index] = value;\n        countPending--;\n        if (countPending === 0)resolve(result); \n      },\n      function error(error){\n        reject(error);\n      });\n    });\n \n  });\n}\nPromise.allSettled:\nfunction allSettled(promises) {\n  if (promises.length === 0) {\n    return Promise.resolve([]); // Resolve immediately if input array is empty\n  }\n \n  return new Promise((resolve, reject) =&gt; {\n    let result = [];\n    let settledCount = 0; // Initialize the settled count\n \n    promises.forEach((promise, idx) =&gt; {\n      Promise.resolve(promise).then(\n        value =&gt; {\n          result[idx] = { status: &#039;fulfilled&#039;, value };\n        },\n        reason =&gt; {\n          result[idx] = { status: &#039;rejected&#039;, reason };\n        }\n      ).finally(() =&gt; {\n        settledCount++; // Increment the settled count in finally rather than doing it twice in value or reason function blocks\n        // Check if all promises have settled\n        if (settledCount === promises.length) {\n          resolve(result);\n        }\n      });\n    });\n  });\n}\n \nPromise.any:\nfunction any(promises) {\n // your code here\n if (!promises.length) throw new AggregateError(&quot;No Promise passed&quot;);\n \n return new Promise((resolve, reject) =&gt; {\n   let settledCount = 0, let errors = [];\n   promises.forEach((promise, index) =&gt; promise\n     .then(data =&gt; resolve(data))\n     .catch(err =&gt; {\n       errors[index] = err;\n       settledCount++;\n       if (settledCount === promises.length) reject(new AggregateError(\n         &#039;No Promise in Promise.any was resolved&#039;,\n         errors\n       ))\n     })\n   )\n })\n}\n \nThat’s it for now, will add more things when i learn more!"},"thoughts/Qdrant-GSoC-2024-Proposal":{"title":"Qdrant GSoC 2024 Proposal","links":[],"tags":[],"content":"Personal Information\n\n\nName: Karan Janthe\n\n\nEmail: karanjanthe@gmail.com\n\n\nGithub: KMJ-007\n\n\nBlog: blog\n\n\nLocation: Gujarat, India\n\n\nTime Zone: UTC+05:30\n\n\nUniversity: Vishwakarma Government Engineering College\n\n\nMajor: Computer Science And Technology\n\n\nProject Description\n\n\nName: WASM-based dimension reduction viz\n\n\nPossible Mentors: Andrey Vasnetsov, Kartik Gupta\n\n\nGoal:\n\n\nImplement a dimension reduction algorithm in Rust and compile to WASM, Integrate the WASM code with Qdrant Web UI.\n\n\nHave a more efficient and smoother implementation using WASM so it can handle more points and higher dimensions efficiently.\n\n\nABOUT ME &amp; WHY I CHOSE THIS PROJECT\nI’m Karan Janthe, currently an undergraduate at Vishwakarma Government Engineering College in Ahmedabad, India. I had been fascinated by computers since I was 14; It has given me ability to create things which i can imagine. I’m a strong believer in “standing on the shoulders of giants” — acknowledging that our advancements are built on the work of those who came before us. I’m committed to giving back to the community that has given me so much, which is why I’ve been actively contributing to open-source projects.\nYou can see my journey on my GitHub profile, where I share most of my projects. One project I’m particularly proud of is my first hackathon winner project, a Rag based PDF question-answer app, which introduced me to Qdrant. This experience sparked my interest in vector databases and led me down the path to local-first software, CRDTs, and ultimately to WebAssembly (WASM).\nIn my free time, I’m channeling my curiosity into building a client-side semantic search using WASM, and experimenting with lightweight ONNX models for efficiency. My latest Rust adventure is RustyScheme, a Lisp interpreter I built to get hands-on with Rust, which was supported by invaluable feedback from the Reddit community (Built a Lisp Interpreter in Rust – Roast my Code!). Currently, I’m taking a course on data mining where I’m delving into dimensionality reduction among other algorithms. This theoretical backdrop is why I’m drawn to this project. I believe that applying these concepts to a real-world problem will solidify my understanding and connect theoretical knowledge with practical application.\nBeyond coding, I’ve served as the Technical Lead for the Google Developer Student Club at my college, organising numerous events and workshops like the one on Git and GitHub. I’m also an active member of the rocketry club, where I’ve worked on avionics for model rockets.\nWorking Environment And Schedule\n\nI’ll be mostly working on the code on weekdays nights (Monday to Friday). On weekends, I’ll be focusing on documentation, testing and bug fixing. My awake hours would usually be in between 10 PM IST (4:30 PM UTC) to 3 AM IST the next day (9:30 PM UTC) and I’m comfortable working anytime during this period, in morning i have my college and other lectures which i need to attend.\nExcept for a few days of traveling (which I’ll be informing in advance to my mentor), I’ll be having no other absences. Anyhow, in cases of emergency, I’ll responsibly notify my mentor of the same with enough detailing.\nPlan:\n\nStudy Qdrant’s Current Web UI Implementation: Begin by examining the current Qdrant Web UI to understand its functionality and how dimensionality reduction is currently being implemented and visualized.\nOptimization Research: Delve into various methods for optimizing t-SNE, drawing insights from the work of kartik. As generall highlighted, the focus will be on refining the implementation rather than the algorithm itself for improved performance.\nAlgorithmic Study and Adaptation: Thoroughly review the wasm-bhtsne’s approach, which is based on speeding up t-SNE through tree-based algorithms. Evaluate the potential of adapting this with a multi-threaded capability for more efficient performance.\nTesting and Benchmarking Preparation: Set up a robust testing framework to address issues like hard-coded parameters and crashes with smaller datasets. Rigorous benchmarking will help to track and optimize performance enhancements.\nImplementation and Integration: Upon completing the optimized algorithm, package the solution as a Rust crate, compile it to WASM, and integrate it with the Qdrant Web UI, ensuring seamless functionality.\n\nApproximate Schedule:\nWeek 1 (5/29-6/4):\n\nPlanning and Initialization: Identify specific performance bottlenecks in the current t-SNE implementation and begin planning for multi-threaded enhancements. Draft a detailed roadmap with milestones for the project.\n\nWeek 2 (6/5-6/11):\n\nEnvironment Setup: Configure development and testing environments. Review existing Rust implementations and understand the nuances of compiling Rust to WASM.\n\nWeek 3 (6/12-6/18):\n\nAlgorithm Study: Deepen the understanding of tree-based t-SNE algorithms. Begin adapting the concepts for a Rust-based implementation that supports threading.\n\nWeek 4 (6/19-6/25):\n\nPrototype Development: Start coding the Rust version of the algorithm. Establish foundational work on multi-threading and parallelism.\n\nWeek 5 (6/26-7/2):\n\nIterative Testing: Implement the initial testing framework. Conduct early tests to detect issues and improve thread management.\n\nWeek 6 (7/3-7/9):\n\nPerformance Tuning: Benchmark the initial prototype and optimize based on findings. Refine the code for better memory and thread efficiency.\n\nWeek 7 (7/10-7/16):\n\nFurther Development: Continue building and refining the algorithm. Expand testing to include edge cases and dataset variability.\n\nWeek 8 (7/17-7/23):\n\nIntegration Preparation: Prepare for the integration of the WASM module into the Qdrant Web UI. Start developing the interface for the integration.\n\nWeek 9 (7/24-7/30):\n\nWASM Compilation: Compile the Rust implementation to WASM. Test the compiled module in a local development version of Qdrant Web UI.\n\nWeek 10 (7/31-8/6):\n\nIntegration and User Interface: Integrate the WASM module with the Web UI. Focus on the user interface and interaction design to ensure a smooth user experience.\n\nWeek 11 (8/7-8/13):\n\nCommunity Feedback: Share the updated visualization with the community. Gather feedback and iterate on the interface and functionality as needed.\n\nWeek 12 (8/14-8/20):\n\nFinal Testing and Documentation: Perform final tests, finalize documentation, and prepare for release. Ensure comprehensive guides are available for users.\n\nWeek 13 (8/21-8/27):\n\nLaunch and Evaluation: Deploy the final integration into the Qdrant Web UI. Monitor performance and user feedback. Evaluate the project against initial goals and benchmarks.\n\nPost-GSoC:\n\nOngoing Maintenance: Commit to regular check-ins with the Qdrant community to address any emerging issues or updates.\n\nWhy me\ncurrently i am diving into the world of Rust and taking a course on data mining this semester. In this class, we’re getting to know different ways to simplify complex data so we can understand it better, different dimension reduction algorithms and their use . This project is a chance for me to really get better at this, to try out what I’m learning in a real project, and to give something back by sharing my work with everyone.\nI love the way open source works, and participating in open Source activities has introduced me to things I’d never known before, improved my coding skills and met a lot of interesting people who I’ve enjoyed communicating with, and I hope to contribute more to the open source world. If I’m lucky enough to be selected for this project, I’ll take it seriously, keep contributing to the community by continuing to maintain it in the future. Although GSoC may be over, my enthusiasm for open source isn’t."},"thoughts/Short-form-Ai-story-teller":{"title":"Short form Ai story teller","links":[],"tags":["seed","project"],"content":"So basic idea is creating visually appealing story telling short videos, from long form content(videos, blog post, books, sci fiction books, etc…), and creating content pipeline tool, so everyone can learn, because short form video is easier to consume then long form text and other kind of mediums\nhttps://youtu.be/epTqUnKsuUY?si=GDZ4Xiv4iwumjKQh"},"thoughts/Tezi/GTM":{"title":"GTM","links":["thoughts/Tezi/"],"tags":["seed"],"content":"GTM strategy for Tezi\nSo first needs to pickup the one storefront which have already most of the customer of DTC and highly customisable,\nShopify seems great fit for this, we already published two plugins on the shopify, and shopify provides great way to integrate and get things done,\nFor our B2B approach, let’s build basic feature standalone plugins, getting initial customers, and then combining all those in one single dashboard, in this way we can execute things and build things one upon another, our main goal is to achieving sales agent level feature parity, so we can start combining both online and offline and then we go for more specific to experiance store and start solving offline market problems, and seeing how retailers are reacting to this, and then going to provide omnichannel experience,\ntwo parts:\n\nTezBrand\nTezAgent\n\nTezBrand:\nfollowing feature as standalone plugins needed to develop and then creating ecosystem of plugins which work together in beautiful fashion:\neach and every following plugin itself has lot of small small features and all of the following are required to operate B2B sales operation\n\nonboarding and approving new customers and providing registration forms\nCustomize prices for specific customers groups\n\nCustomize prices for each product of specific customers\n\n\nwholesale/Discounts based on purchase volume/ leader pricing\n\nLimit customers’ purchases by quantity and amount\n\n\nsales representative login and manual order creation\n\nCustomer Record Creation: Sales agents will have the ability to create customer records directly via SparkLayer (useful for sales agents on the road or at trade shows).\nPrice Modification: We’re introducing the ability to adjust prices in real-time\nCommission Reporting: we’ll be releasing basic reporting on tracking sales agent commissions\nAccess History and Order Overview: Sales agents will be able to view the most recently accessed accounts and orders across all customers.\nUser Experience Improvements: We’ll be separating the sales agent roles from customer group setup, allowing sales agents to place orders more seamlessly.\nCustomer Buying Behaviour: The system will list the most frequently bought products per customer, assisting in sales and marketing efforts.\n\n\nTezBrand and TezAgent integration\nTezAgent:\nAgent’s onboarding, his profiling\nhis credit score, and past performance and other things\nonce agent is onboard on the tezagent, he will start seeing the active brand’s, and it’s incentive, and he can create the request, then brand will approve the agent\nthen he can start his offline marketing, and once he receive the orders, he can create that order on tezbrand and brand will see the order created by agent by order\n"},"thoughts/Tezi/index":{"title":"Tezi","links":[],"tags":["seed"],"content":"commerce:\nOnline shopping has been around since 1995, but it wasn’t until recent years that the number of digital shoppers exceeded those who shopped exclusively at physical stores.\nEcommerce, in its current form, is not intended to completely replace in-store shopping. Some retailers are even moving towards a model where you can try things in-store and then get the same product shipped to you.\nMost customers embrace both ways of shopping. In the US, the number of customers who didn’t buy anything on the internet decreased to 30%. But digital buyers don’t stop visiting traditional stores—they shop both online and in-store.\nNevertheless, ecommerce sales make up a growing share of retail. As recently as 2017, online sales accounted for just 1/10th of all worldwide sales. By 2025, they are expected to represent almost 25% of total retail sales.\n\n\nCurrently, about 20% of all retail sales happen online\nThe number of brick-and-mortar retail stores in the US is declining, but the total sales volumes at physical stores are still increasing\nThe annual growth rate for in-store sales is about 4% while for ecommerce sales it’s almost 13%\nThe most popular advertising channels for online stores are Google Shopping, Facebook Ads, Amazon, and Google Search\n\ngeneration wise buying patterns\n\nSo it’s clear that e-commerce will not replace the offline stores, and they will co exist in some way in or another way.\n\nWhat:\nIn a rapidly evolving retail landscape where online and offline channels coexist, Tezi emerges as a pioneering solution that transcends traditional boundaries. Rather than simply offering another platform for online sales or attempting to replicate offline retail models digitally, Tezi fundamentally reimagines the relationship between the two.\nThe Tezi Approach:\nTezi acknowledges that while online commerce has streamlined direct-to-consumer (DTC) sales, and offline retail possesses established distribution networks, both operate within distinct ecosystems. Our goal is not merely to coexist with these structures but to harness their synergies and propel businesses forward.\nBreaking Down Silos:\nTezi breaks down the silos between online and offline retail by offering a unified platform that seamlessly integrates both channels. Whether a brand is selling directly to consumers or engaging in B2B transactions, Tezi provides the tools and infrastructure to navigate these complexities effortlessly.\nElevating Customer Experience:\nAt the heart of Tezi’s mission is the commitment to elevate the customer experience across all touchpoints. By bridging the gap between digital and physical retail, Tezi enables brands to deliver a cohesive and immersive shopping journey that transcends the limitations of individual channels.\nCertainly! Let’s refine the section on how Tezi addresses the challenges of managing both DTC and B2B segments:\n\nHow Tezi Solves the DTC and B2B Conundrum:\nMany online brands excel in the direct-to-consumer (DTC) space but face unique challenges when expanding into business-to-business (B2B) sales. Tezi recognizes these complexities and offers a comprehensive solution to seamlessly manage both segments.\nChallenges in Managing DTC and B2B:\nTailored Functionality:\nTraditional DTC themes and stores are not optimized to cater to the specific needs of B2B customers. From custom pricing to exclusive discounts, B2B transactions require tailored functionality that standard DTC platforms often lack.\nComplex Onboarding Processes:\nOnboarding and approving B2B customers can be time-consuming and cumbersome. Brands must navigate intricate approval processes and establish custom pricing structures for individual clients.\nDiverse Pricing Structures:\nB2B transactions often involve negotiated pricing, bulk discounts, and exclusive catalog pricing. Managing these diverse pricing structures alongside standard DTC pricing adds another layer of complexity.\nStreamlined Order Processing:\nUnlike DTC orders, B2B transactions often require follow-up and credit payment options. Brands must ensure seamless order tracking, checkout, and shipping processes to meet the unique needs of B2B customers.\nThe Tezi Solution:\nTezi simplifies the management of DTC and B2B sales with its all-in-one platform tailored to the needs of modern brands.\nUnified Dashboard:\nTezi provides a single, intuitive dashboard where brands can oversee both DTC and B2B activities. From monitoring sales to managing orders, brands gain comprehensive visibility into their operations.\nSeamless Onboarding:\nWith Tezi, onboarding new B2B customers is effortless. Brands can automate the approval process and provide customers with access to specific wholesale pricing and catalogs, streamlining the onboarding experience.\nSales Agent Support:\nTezi empowers sales agents with dedicated login access, enabling them to place orders on behalf of B2B clients. This feature simplifies the sales process and enhances customer service.\nEnhanced Customer Experience:\nTezi enhances the B2B customer experience with features such as order tracking, customizable portals, and due payment reminders. By providing a seamless user experience, brands can build long-lasting relationships with their B2B clients.\nSimplifying Management:\nGone are the days of managing multiple stores and integrating countless plugins. Tezi eliminates the headache of juggling multiple platforms by offering a single, integrated solution for DTC and B2B sales.\nPersonalized Experience:\nTezi ensures a personalized experience for each customer. Whether they’re a DTC shopper or a B2B client, users receive tailored experiences based on their unique needs and preferences.\nEffortless Integration:\nTezi seamlessly integrates with existing stores, enabling brands to leverage their current infrastructure while unlocking powerful B2B capabilities. With Tezi, there’s no need for complex integrations or plugin management – everything works seamlessly out of the box.\nOmnichannel Customer Experience:\nTezi revolutionizes the retail landscape by delivering a truly seamless omnichannel experience, where online and offline worlds seamlessly converge to enhance customer satisfaction and drive business growth.\nHow Tezi Facilitates Omnichannel Experience:\nUnified Inventory Management:\nTezi’s advanced inventory management system ensures real-time synchronization of stock levels across all channels, whether it’s your online store or brick-and-mortar locations. This means that customers can shop with confidence, knowing that the products they see online are available for immediate purchase, even if they prefer to buy from a physical store.\nIntelligent Order Routing:\nImagine a scenario where a customer in Delhi places an order on your website, but you have a local retailer in their vicinity with the exact product in stock. Tezi’s intelligent order routing system automatically notifies the retailer, allowing them to fulfill the order locally. This not only enables same-day delivery for the customer but also empowers local retailers to participate in the fulfillment process seamlessly.\nPersonalized Customer Journeys:\nTezi leverages data analytics and machine learning algorithms to create personalized shopping experiences for every customer, regardless of their preferred channel. Whether they’re browsing your website, interacting with your mobile app, or visiting a physical store, customers receive tailored recommendations, promotions, and offers based on their past behavior and preferences.\nStreamlined Communication:\nCommunication is key to delivering a seamless omnichannel experience. Tezi centralizes all customer communications, allowing brands to engage with their audience across multiple touchpoints, including email, SMS, social media, and in-store interactions. Whether it’s order updates, promotional campaigns, or customer support inquiries, Tezi ensures consistent and timely communication at every stage of the customer journey.\nData-Driven Insights:\nBy aggregating data from online and offline channels, Tezi provides brands with deep insights into customer behavior, market trends, and sales performance. This invaluable data empowers brands to make informed decisions, optimize their marketing strategies, and tailor their product offerings to meet evolving customer demands.\nThe Tezi Advantage:\nTezi doesn’t just bridge the gap between online and offline retail – it redefines it. By seamlessly integrating digital and physical channels, Tezi empowers brands to deliver a cohesive, personalized shopping experience that drives customer loyalty, increases sales, and sets them apart from the competition."},"thoughts/Understanding-authentication-from-first-principle":{"title":"Understanding authentication from first principle","links":[],"tags":["seed"],"content":"\nso i come across this tweet by chinmay, and i also thought, he has point, and talking BS, i also have macro view and believes which i read on the Internet and tutorial i learned from about the how to implement auth, i think i need to explore this rabbit hole,\nunderstanding authentication from first principle, starting from very basic example and deriving things as we need\nalso pilcrow also announced few weeks ago, that he is also working on something similar"},"thoughts/Vibe-board":{"title":"vibe board","links":[],"tags":["seed"],"content":"I think like people have their website to tell about themselves, they should have vibe boards, which can reflect their vibes, no texts or any thing which need to explain, it should be self explanatory to signal the vibes of the person"},"thoughts/index":{"title":"Thoughts","links":[],"tags":[],"content":"All of my thoughts lives here!"},"thoughts/bare-metal":{"title":"bare-metal","links":["thoughts/hypervisor"],"tags":["seed"],"content":"wtf is bare metal ?\ncomputer that talks directly does mouth to mouth communication with hardware, no lipstick, no makeup anything in between, no os, nothing, application directly uses all the resource it needs,\n\ncan i call my laptop bare metal ?\nYes, you can refer to your laptop as a “bare metal” system if you are running applications directly on the laptop’s hardware without any virtualization or operating system layer in between.\nMost regular laptops run an operating system like Windows, macOS, or Linux. In that case, the OS manages the hardware resources and acts as an abstraction layer between the applications and the bare metal components like CPU, RAM, storage etc.\nHowever, if you have configured your laptop to boot directly into an application or service without going through a full operating system, then it can be considered a bare metal setup. Some possible bare metal use cases on a laptop include:\n\nBooting into a lightweight embedded environment to run a specific application with direct hardware access.\nUsing the laptop as a hardware development/testing platform by booting into a bare metal hypervisor.\nRunning scientific/technical computing workloads that bypass the OS for maximum performance.\nInstalling a bare metal server operating system like FreeBSD, FreeRTOS etc. on the laptop.\n\nSo in summary, while most standard consumer laptops don’t run in a bare metal configuration out-of-the-box, it is possible to set them up that way for specific use cases requiring direct hardware control and access. As long as there is no OS virtualizing the hardware, you can describe your laptop as a “bare metal” system.\ncool project:\nhttps://github.com/firecracker-microvm/firecracker\nalso what is hypervisor"},"thoughts/concurrency":{"title":"concurrency","links":[],"tags":["seed"],"content":"need to understand the concurrency and parallelism"},"thoughts/encryption":{"title":"encryption","links":[],"tags":["seed"],"content":"need to have better understanding of how encryption works basic, how asymmetric encryption works, how public key and private key gets resolved, how ssh works, how it authenticate things ?"},"thoughts/failure-resume":{"title":"failure-resume","links":[],"tags":["evergreen"],"content":"in today’s world most people make resume, in which they showcase their highlights and their best wins, as i have bet with my friend to not make professional resume, which is fun and forces me to think new ways to tackling things and approaching them.\nbut life is not about all the wins, there are lot of failures, efforts, learnings, unlearning, luck and all other kinds of things, which people don’t talk about that much often, which creates unhealthy environment of people only talking and idolizing the perfect and setting unrealistic standards for themselves and sometime for others also.\ni got to know about the idea of failure resume1 last year, tbh, nobody likes to talk about their failures and that too it public, i wanted to create one for myself, to remind me how i grow, where i came from, how i was struggling, stupid mistakes, it’s just for me to look back and remind how stupid i was!\ntalking about failures like this, creates more good environment and keeps us to ground truth, that all have failures and nobody is perfect and learning from each others failures.\nthis document gives me more courage to try new things and applying for things i would otherwise think i am unqualified to apply for.\nif you are not getting rejected, you are not trying hard or settling for the easy\n2024:\n\ngot rejected from qdrant summer of code application\nfailed in driving license exam\n\nFootnotes:\nFootnotes\n\n\nhttps://www.nytimes.com/2019/02/03/smarter-living/failure-resume.html ↩\n\n\n"},"thoughts/fastai/index":{"title":"fastai","links":[],"tags":["seed"],"content":"I am taking fast ai course so taking notes and learning as i go through them"},"thoughts/fastai/lesson-1":{"title":"lesson 1","links":["thoughts/fastai/"],"tags":["course"],"content":"lesson of fastai course notes:\n\ndidn’t know jyuputer notebook can do lot of things, you can use it for slides, blogs, also publish book and library\n"},"thoughts/good-engineers":{"title":"good engineers","links":[],"tags":["seed"],"content":"List of people which i think are good engineers, they know what they are talking about and i need to learn a lot from them:\n\ni know about lot of other famous people also but following are just on top of mind which i think about often\n\n\nEric Zhang\nStephen Tong\nAman Sanger\nSidu Ponnappa\nGDB\nZack Overflow\n"},"thoughts/how-vite-works-":{"title":"how vite works ?","links":[],"tags":["seed"],"content":"my go to for most js related project is vite, from when i got introduced, i don’t ever think about webpack or other things, but i always have thought, how and where the magic is happening, at the very end, browser only understands three things, html, css, javascript, they don’t know what the hell is react, typescript and all other frameworks, so how this magic happens,\nthis will be great rabbit hole to explore, will learn a lot of things\nguy here tries to explain this: https://www.youtube.com/watch?v=M_edImKoEt8\nall transplior and compiler, babel, esbuild, webpack, rollup, forward and backward compatibility, bundling etc…, there are lot of things which we hear and ignore them thinking they are mostly buzzword or jargons"},"thoughts/hypervisor":{"title":"hypervisor","links":[],"tags":["seed"],"content":"it is just abstraction over host operating system, you remember there is concept of virtual memory, memory which physical don’t exist but to make things simpler we create virtual memory, hypervisor is also like the same we can say!\nhypervisor is nothing but a piece of software which makes easy to create and monitor different different virtual machines\nremeber playing with this bad boy ?\nwasting days trying to boot macos ?\n\nthere are different different types of hypervisors:\n"},"thoughts/java-chip8-emulator":{"title":"java chip8 emulator","links":[],"tags":["seed","project"],"content":"chip 8 emulator project seems to be very interesting, and i also need to submit that for the college project, so need to build this project\nresources and links:\n\nhttps://tobiasvl.github.io/blog/write-a-chip-8-emulator/\nhttps://www.youtube.com/watch?v=YtSgV3gY3fs\n\nplz write a blog if you end up doing this, will be helpful to the other people"},"thoughts/javascript-rants":{"title":"javascript-rants","links":[],"tags":["seed"],"content":"wtf is cjs and mjs ?"},"thoughts/jit":{"title":"jit","links":[],"tags":["seed"],"content":"jit which stands for just in time compilers"},"thoughts/programming-books":{"title":"programming books","links":[],"tags":["seed"],"content":"Programming books on my reading list:\n\n Structure and Interpretation of Computer Programs(SICP)\nBeautiful Code\nlet over lmbda(first complete sicp for this one)\nCrafting Interpreters\nCoding the Matrix: Linear Algebra through Applications to Computer Science\nThe New Turing Omnibus\nThe Art of Computer Programming(little heavy, only pick if you are having heartbreak)\nProgrammers at Work\nDesigning Data-Intensive Applications\nCode: The Hidden Language of Computer Hardware and Software\nCracking the Coding Interview\nWorking in Public: The Making and Maintenance of Open Source Software\nhttps://medium.com/gojekengineering/the-go-jek-reading-list-1088712ccc14\n"},"thoughts/qdrant-gsoc":{"title":"qdrant-gsoc","links":[],"tags":["seed"],"content":"link: https://qdrant.notion.site/GSoC-2024-ideas-1dfcc01070094d87bce104623c4c1110\nwanted to contribute to open source and with rust it is going to more awesome!\nso 18th march is the date to send the mail,\nbefore that i need to polish and work on few things to incerase my probability of getting selected for this\nbasic principle  is show don’t tell, giving them link to view the work then telling them i did this or that is more important\nfirst i need to complete two blogs:\n\nnodejs oberservability using signoz\nhow we increased the pdf creation time on client side using webworker and some wasm experiments\nrust based another project i need to work on(maybe multi threaded web crawler?) (and if i combine the webcrawler project with wasm and give the real time demo then it would be more awesome)\n"},"thoughts/quotes":{"title":"Quotes","links":[],"tags":["evergreen"],"content":"“The times are urgent; let us slow down.” —Bayo Akomolafe\n“Once you free your mind about a concept of harmony and of music being correct, you can do whatever you want. So nobody told me what to do, and there was no preconception of what to do.“-Giorgio_by_Moroder\n“From among the endless, infinite, impossible yous, you will, in time, become yourself; become, at least in this world, the only you that you could have ever really been.” ●\n“You will soon have your God, and you will make it with your own hands.” ●"},"thoughts/self-help-books-are-mirage":{"title":"self help books are mirage","links":[],"tags":["seed"],"content":""},"thoughts/sentry-error-and-LLm-based-github-PR":{"title":"sentry error and LLm based github PR","links":[],"tags":["seed","project"],"content":"this is going to be great project, give access to the your github repo, give api access to the sentry, bot will see the errors from the sentry and will automatically create the github PR for you which fixes the error, this small small are really simple but are overlooked lot of time\nplz write a blog if you end up doing this, will be helpful to the other people"},"thoughts/serverless":{"title":"serverlesss","links":["thoughts/Database-schema-and-architecture-mistakes-and-learnings"],"tags":["seed"],"content":"Thoughts learnings while i was messing with serverless, despite i knew the hype, but i still wanted to get my hands burnt!\nwhat do we even mean by serverless in first place ?\nthere is no server ? then where does our code runs ????\nso let’s try to understand where the problem lies which serverless computing is trying to solve,\nimagine you are using normal server for serving your users, they normally use in day time, everything is going good, you are paying for rented server through xy service, and servers are running 24/7, but user don’t use your software 24/7, they are also human, they also sleep, they also do other things, so we are paying for server rent when we are not using also!\nhere comes the serverless in the picture, we only pay for what we use, so when someone sends request to our backend server, it will wake up, process the request, and then go offline, and we only pay for what amount of time we used!\nokay but math is not mathing, when we call request our backend  in serverless, it will take some time to wake up and in net net res time will increase right ?\ncold start problem:\nyes!, this problem is called cold start problem in world of serverless computing, what you think aws knows something black magic or other serverless providers, cold start problem occurs when it is first time someone is invoking(fancy word for calling or making request) your serverless function, service which you are using will spin up new container to execute the code, and spinning up new container will take some time, which we called as cold start time, but once container is up, if any new request comes then there will be no cold start time!\nonly one company has solved cold start problem, which is cloudflare, they have taken different approach for running serverless functions, most serverless computing providers runs serverless code in new containers, but cloudflare handles this differently:\naws lambda runs nodejs where as cloudflare workers runs v8 engine\nCloudflare Workers runtime uses the Chrome V8 Engine to run Javascript code. Each process is sandboxed using “isolates” so that the different users’ codes are run in a single process in an isolated and secure way. This reduces the overhead of processes.\ninterested more in isolates ? → HN\n\nso let’s get back to serverless!\nanother big thing which all serverless providers says it, your code will run on the edge, or in better way of saying, your code will run near your user as much as possible, so response time get as low as possible, and request is served fastam fast!!!!!\nbecause we are paying for what we use, serverless seems cheap!\nbtw, this if you are in js ecosystem or frontend, you would have used next js or heard about it for sure, and you also know about vercel,\never wondered why it is very hard to host your nodejs backend api for free, heroku was there in the backdays, but compare to frontend, they are free, nextjs is full stack framework, so you can write backend api in one managed codebase, no need to go to two different things, then question arises how vercel and other people are providing free hosting for nextjs, where my frontend and api both are getting taken care where as other platform are asking for money,\nnextjs under the hood, converts all the api routes/functions into lambda function(serverless function) and it deploys them to aws lambda, so we can call it wrapper in one way!\nwe don’t need to worry about scaling, serverless functions will scale automatically.\nit’s rant time:\nthings i don’t like or hate about this hyped(currently very hyped) serverless world:\n\nhalf of things don’t work on serverless, i need to find lot of workaround even can’t use some good library because they don’t run on serverless, cloudflare has some good support for nodejs library, but yesterday was implementing encryption and decryption in one of my apis and they don’t even support cipher, i wanted to use orchid orm but it doesn’t work in serverless, it’s all about trade offs\n\nlogging is very big pain in this serverless world, talking specific about cloudflare, it don’t gives direct logging, you can open socket connection to view live logs, but no way of storing them managing it, i wrote simple function to store my errors in discord for free, vercel is nice in this case for nextjs, it stores logs for me, thankyou vercel \nedge computing and serverless is double edge sword, if you don’t know what your doing and how actually distributed thing is working, for example if you are using serverless which is on the so called edge to get close to user for less latency but your database is in one place, and it’s not optimised to handle current architecture, then backend to database round trip will cost more, and edge in net will take more time to complete the operation, good explanation in this video\nit’s stateless, you can’t do those fs workaround or memory storing hacky things in serverless, you need to store your state if you care about in some database or somewhere other\n\n\n\nAPIs are platform specific. Examples:\n\n\nThe serverless functions you wrote for AWS Lambda cannot just be run on Cloudflare Workers, since Workers doesn’t use NodeJS.\n\n\nThis is extremely annoying when you find a bug and you want to switch to another service provider, but your code or your dependencies do not support another provider.\n\n\nThis also means you have to learn how the service works.\n\n\neven machine learning people are nowdays agnostic, be like them (onnx)\n\n\n\nhard limitation on cpu usage timing even i want to pay\nif you are hitting scale then serverless can make you go bankrupt, it’s make more sense to go for dedicated machine if you are at scale(context is king, and also answer is it depends)\nin the end you trade old problems with new problems nothing new, it’s just suffering with extra steps\n\none thing which i like if i have some small hobby project, which is not that too complex and simple, hosting it’s backend to rented vm still cost some money, where this all serverless function providing services offer very very good free generous tier, which totally make sense to use, but for big production app/service, need to be aware about which trade offs you are willing to take and how that will work in the future\ntbh, answer to any fucking question is it depends!\nhere aws itself who is famous for aws lambda, amazon prime itself rewrote it’e microservice architecture to monolith, they publish article on this how they saved 90 % cost\narticle person : https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90\nvideo person : https://youtu.be/qQk94CjRvIs?si=6Dvg0SfZ3jCTxqKK\nand i am still trying to wrap my mind around how serverless database works, i know instant replicas hack, so read will me much more faster and distributsed but write will be expensive, but all this new startups and their claims still don’t make sense, maybe skill issue or they are just jargons wraped in some old thing, will write when i explore database, at current stage i am crying and learning about how to architect  database schema, so i don’t need to sleepless nights to fix data inconsistency issues!"},"thoughts/so-you-know-yarvin-right":{"title":"so you know yarvin right?","links":[],"tags":["seed"],"content":"so you know yarvin right?\nhow it started:\n\nand now i am writing about it, and why it is great question to ask if you want to know the other person better, how they think and what they think:"},"thoughts/space-rag-app":{"title":"space-rag-app","links":[],"tags":["seed"],"content":"creating a rag based app to help space guys to get things more easily\nusing this as my rough notes and thinking ground,\nmain goal is ki log question puch sake, they can get guidance, simplifying terms in easier way, code generation specific to repo and open source projects"},"thoughts/to-read-book":{"title":"to read book","links":[],"tags":["evergreen"],"content":"list of things which i want are on my to read or i have already read but want to reread\nskim through them and categorise them:\nhttps://arpitbhayani.me/papershelf\nhttps://notes.ekzhang.com/events/nysrg\nhttps://notes.ekzhang.com/events/hsrg\n\nStructure and Interpretation of Classical Mechanics\n"},"thoughts/toc":{"title":"toc","links":[],"tags":["seed"],"content":"Theory of Computation"}}